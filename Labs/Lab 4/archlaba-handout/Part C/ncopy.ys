# Cao Shengcao - 1500012838

# Major optimization methods:
# 1. Using iaddl instruction.
# 2. Loop unrolling (k = 4).
# 3. Reducing redundant cycles.

#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion

Head1:
    xorl %eax,%eax          # count = 0
    iaddl $-4,%edx          # len -= 4
    jge Loop1A              # if len is still non-negative, Loop1 can be executed
    jmp Head2               # else Loop2 will be executed

Loop1A:                     # use two registers %esi & %esi to operate on the first two elements
                            # read together and write together, in this order bubbles are reduced
    mrmovl (%ebx),%esi      # read valA and valB from src
    mrmovl 4(%ebx),%edi
    rmmovl %esi,(%ecx)      # store valA and valB to dst
    rmmovl %edi,4(%ecx)

LAA:                        # if the first one is positive, %eax will be renewed
    andl %esi,%esi
    jle LAB
    iaddl $1,%eax
LAB:                        # if the second one is positive, %eax will be renewed
    andl %edi,%edi
    jle Loop1B
    iaddl $1,%eax

Loop1B:                     # the next two elements, similar to Loop1A
    mrmovl 8(%ebx),%esi
    mrmovl 12(%ebx),%edi
    rmmovl %esi,8(%ecx)
    rmmovl %edi,12(%ecx)

LBA:
    andl %esi,%esi
    jle LBB
    iaddl $1,%eax
LBB:
    andl %edi,%edi
    jle Npos1
    iaddl $1,%eax

Npos1:
    iaddl $16,%ebx          # src += 4
    iaddl $16,%ecx          # dst += 4
    iaddl $-4,%edx          # len -= 4
    jge Loop1A              # the test on %edx can be omitted

Head2:
    iaddl $4,%edx           # len += 4, which returns to be non-negative
    jle Done                # the test on %edx can be omitted

Loop2:                      # simpler Loop2, similar to Loop1
    mrmovl (%ebx),%esi
    rmmovl %esi,(%ecx)
    andl %esi,%esi
    jle Npos2
    iaddl $1,%eax

Npos2:
    iaddl $4,%ebx           # src++
    iaddl $4,%ecx           # dst++
    iaddl $-1,%edx          # len--
    jg Loop2                # the test on %edx can be omitted

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
