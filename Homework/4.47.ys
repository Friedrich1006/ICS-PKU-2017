    .pos 0

init:
    irmovq  stack, %rsp
    call    main
    halt

    .align 8
    a:                      # test array
        .quad   7
        .quad   4
        .quad   2
        .quad   6
        .quad   9
        .quad   0
        .quad   5
        .quad   1
        .quad   8
        .quad   3

bubble_p:
    irmovq  1, %rax
    subq    %rax, %rsi      # %rsi: last = count - 1
    jle     bubble_p_end1

bubble_p_loop1:
    rrmovq  %rsi, %rax
    addq    %rax, %rax
    addq    %rax, %rax
    addq    %rax, %rax      # %rax: last * 8
    rrmovq  %rdi, %r8
    addq    %rax, %r8       # %r8: r = data + last
    rrmovq  %rdi, %rdx      # %rdx: p = data
    rrmovq  %rdx, %rax
    subq    %r8, %rax
    jge     bubble_p_end2

bubble_p_loop2:
    irmovq  8, %rcx
    addq    %rdx, %rcx      # %rcx: q = p + 1
    mrmovq  (%rdx), %r9     # %r9: *p
    mrmovq  (%rcx), %r10    # %r10: *q
    rrmovq  %r10, %rax
    subq    %r9, %rax
    jge     no_swap

swap:
    rmmovq  %r10, (%rdx)
    rmmovq  %r9, (%rcx)     # swap

no_swap:
    irmovq  8, %rax
    addq    %rax, %rdx      # ++p
    rrmovq  %rdx, %rax
    subq    %r8, %rax
    jl      bubble_p_loop2

bubble_p_end2:
    irmovq  1, %rax
    subq    %rax, %rsi      # --last
    jg      bubble_p_loop1

bubble_p_end1:
    ret

main:
    irmovq  10, %rsi
    irmovq  a, %rdi
    call    bubble_p
    ret

    .pos 0x200

stack:
